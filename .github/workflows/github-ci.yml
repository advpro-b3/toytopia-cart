name: Java CI/CD Pipeline


on:
  push:
  pull_request:



env:
  ACTIONS_RUNNER_DEBUG: true
jobs:
  build:
    # We specify what image to use. Can be also Mac or Windows.
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:

      # Step 1: checkout the code from git
      - uses: actions/checkout@v3

      # Step 2: Set up the JVM need to build our application
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          server-id: github
          settings-path: ${{ github.workspace }}
      # Step 3: run gradle build
      - name: Build with Gradle
        run: |
          chmod +x gradlew
          export GRADLE_USER_HOME=$HOME/.gradle
          ./gradlew assemble

      # Step 4: login to docker hub using credentials set in github
      # secrets described in previous section
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 5: Set up QEMU in order to be able to run docker daemon
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Step 6: Set up docker build functionality
      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v3

      # Step 7: build docker image and push it to docker hub
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.REGISTRY_USER }}/toytopia-cart:latest

      # Step 8: Authenticate to google cloud
      - uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.SSH_KEY }}'

      # Step 9: Deploy our app to google cloud
      - id: 'deploy'
        uses: 'google-github-actions/deploy-cloudrun@v2'
        with:
          service: 'toytopia-cart'
          flags: '--allow-unauthenticated'
          image: '${{ secrets.REGISTRY_USER }}/toytopia-cart:latest'
          env_vars: |
            SPRING_DATASOURCE_DRIVER-CLASS-NAME=org.postgresql.Driver
            SPRING_DATASOURCE_PASSWORD=${{ secrets.JBDC_DATABASE_PASSWORD }}
            SPRING_DATASOURCE_USERNAME=${{ secrets.JBDC_DATABASE_USERNAME }}
            SPRING_DATASOURCE_URL=jdbc:postgresql://${{ secrets.JBDC_DATABASE_URL }}/postgres

#jobs:
#  build:
#    name: Build
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout Repository
#        uses: actions/checkout@v4
#
#      - name: Set up JDK 21
#        uses: actions/setup-java@v4
#        with:
#          distribution: "temurin"
#          java-version: "21"
#          cache: "gradle"
#
#      - name: Cache Gradle dependencies
#        uses: actions/cache@v4
#        with:
#          path: ~/.gradle/caches
#          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#          restore-keys: |
#            ${{ runner.os }}-gradle-
#      - name: Make gradlew executable
#        run: chmod +x ./gradlew
#      - name: Build with Gradle
#        run: |
#          ./gradlew assemble
#      # (Optional) Add steps for running tests and generating reports
#
#      - name: Upload Artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: java-app
#          path: build/libs/*.jar
#
#  test:
#    name: Test
#    runs-on: ubuntu-latest
#    needs: build
#    steps:
#      - name: Checkout Repository
#        uses: actions/checkout@v4
#
#      - name: Set up JDK 21
#        uses: actions/setup-java@v4
#        with:
#          distribution: "temurin"
#          java-version: "21"
#          cache: "gradle"
#      - name: Make gradlew executable
#        run: chmod +x ./gradlew
#      - name: Cache Gradle dependencies
#        uses: actions/cache@v4
#        with:
#          path: ~/.gradle/caches
#          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#          restore-keys: |
#            ${{ runner.os }}-gradle-
#      - name: Test with Gradle
#        run: |
#          ./gradlew check --info --stacktrace
#          ./gradlew test
#          ./gradlew jacocoTestReport
#      # (Optional) Add steps for generating coverage report and other post-test tasks
#
#  publish:
#    name: Publish Docker Image
#    runs-on: ubuntu-latest
#    needs: test
#    steps:
#      - name: Checkout Repository
#        uses: actions/checkout@v4
#      - name: check directory
#        run: ls -al
#      - name: Download Artifact
#        uses: actions/download-artifact@v4
#        with:
#          name: java-app
#      - name: check directory
#        run: ls -al
#      - name: Docker login
#        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.REGISTRY_USER }} --password-stdin docker.io
#      - name: Set Docker BuildKit
#        run: export DOCKER_BUILDKIT=1
#      - name: Build Docker Image
#        run: |
#          docker build --build-arg PRODUCTION=$PRODUCTION --build-arg JDBC_DATABASE_PASSWORD=$JDBC_DATABASE_PASSWORD --build-arg JDBC_DATABASE_URL=$JDBC_DATABASE_URL --build-arg JDBC_DATABASE_USERNAME=$JDBC_DATABASE_USERNAME -t ${{ secrets.REGISTRY_USER }}/${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_TAG }} .
#          docker push ${{ secrets.REGISTRY_USER }}/${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_TAG }}
#  deploy:
#    name: Deploy to GCP
#    runs-on: ubuntu-latest
#    needs: publish
#    steps:
#      - name: Checkout Repository
#        uses: actions/checkout@v4
#
#      - name: Install SSH client
#        run: sudo apt-get install openssh-client
#
#      - name: create ssh key
#        run: echo "${{ secrets.SSH_KEY }}" > ssh-key.pem && cat ssh-key.pem
#
#      - name: update permission
#        run: chmod 400 ssh-key.pem
#      - name: Deploy to GCP
#        run: |
#          ssh -o StrictHostKeyChecking=no -i ssh-key.pem ${{ secrets.GCP_USERNAME }}@${{ secrets.GCP_STATIC_IP }} "
#            sudo docker container rm -f ${{ secrets.CONTAINER_NAME }} || true &&
#            sudo docker image rm -f ${{ secrets.REGISTRY_USER }}/${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_TAG }} || true &&
#            sudo docker run --name ${{ secrets.CONTAINER_NAME }} -d -p 80:8080 ${{ secrets.REGISTRY_USER }}/${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_TAG }}"